import streamlit as st
import pandas as pd
import io
import tempfile
import os
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, Border, Side
import base64

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="RadiaTool Web v1.9",
    page_icon="üîß",
    layout="wide",
    initial_sidebar_state="expanded"
)

class RadiatorWebApp:
    def __init__(self):
        self.sheets = {}
        self.brackets_df = pd.DataFrame()
        self.entry_values = {}
        self.initialize_session_state()
        self.load_data()
    
    def initialize_session_state(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        defaults = {
            'connection_var': 'VK-–ø—Ä–∞–≤–æ–µ',
            'radiator_type_var': '10',
            'bracket_var': '–ù–∞—Å—Ç–µ–Ω–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã',
            'radiator_discount': 0,
            'bracket_discount': 0,
            'show_tooltips': False,
            'spec_data': None
        }
        
        for key, value in defaults.items():
            if key not in st.session_state:
                st.session_state[key] = value
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö Excel —Ñ–∞–π–ª–æ–≤"""
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤
            matrix_path = "data/–ú–∞—Ç—Ä–∏—Ü–∞.xlsx"
            if os.path.exists(matrix_path):
                self.sheets = pd.read_excel(matrix_path, sheet_name=None, engine='openpyxl')
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤
                if "–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã" in self.sheets:
                    self.brackets_df = self.sheets["–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã"].copy()
                    self.brackets_df['–ê—Ä—Ç–∏–∫—É–ª'] = self.brackets_df['–ê—Ä—Ç–∏–∫—É–ª'].astype(str).str.strip()
                    del self.sheets["–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã"]
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤
                for sheet_name, data in self.sheets.items():
                    data['–ê—Ä—Ç–∏–∫—É–ª'] = data['–ê—Ä—Ç–∏–∫—É–ª'].astype(str).str.strip()
                    data['–í–µ—Å, –∫–≥'] = pd.to_numeric(data['–í–µ—Å, –∫–≥'], errors='coerce').fillna(0)
                    data['–û–±—ä–µ–º, –º3'] = pd.to_numeric(data['–û–±—ä–µ–º, –º3'], errors='coerce').fillna(0)
                    
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    
    def create_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        st.title("üîß RadiaTool Web v1.9")
        st.markdown("---")
        
        # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å - –º–µ–Ω—é
        with st.sidebar:
            st.header("–ú–µ–Ω—é")
            
            if st.button("üîÑ –°–æ–∑–¥–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é METEOR"):
                self.generate_spec("excel")
            
            if st.button("üìä –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª METEOR CSV"):
                self.generate_spec("csv")
            
            st.markdown("---")
            st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            
            uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é", 
                                           type=['xlsx', 'xls', 'csv'])
            if uploaded_file:
                self.handle_file_upload(uploaded_file)
            
            st.markdown("---")
            st.header("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            
            if st.button("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"):
                self.show_instruction()
            
            if st.button("üìÑ –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ"):
                self.show_license()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å - –º–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤
        self.create_matrix_interface()
        
        # –û–±–ª–∞—Å—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
        self.create_spec_preview()
    
    def create_matrix_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤"""
        st.header("–ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤")
        
        # –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        col1, col2, col3 = st.columns(3)
        
        with col1:
            connection = st.selectbox(
                "–í–∏–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                ["VK-–ø—Ä–∞–≤–æ–µ", "VK-–ª–µ–≤–æ–µ", "K-–±–æ–∫–æ–≤–æ–µ"],
                index=0,
                key="connection_var"
            )
        
        with col2:
            # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if st.session_state.connection_var == "VK-–ª–µ–≤–æ–µ":
                types = ["10", "11", "30", "33"]
            else:
                types = ["10", "11", "20", "21", "22", "30", "33"]
            
            radiator_type = st.selectbox(
                "–¢–∏–ø —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞",
                types,
                index=0,
                key="radiator_type_var"
            )
        
        with col3:
            bracket_type = st.selectbox(
                "–¢–∏–ø –∫—Ä–µ–ø–ª–µ–Ω–∏—è",
                ["–ù–∞—Å—Ç–µ–Ω–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã", "–ù–∞–ø–æ–ª—å–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã", "–ë–µ–∑ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤"],
                index=0,
                key="bracket_var"
            )
        
        # –°–∫–∏–¥–∫–∏
        col4, col5 = st.columns(2)
        with col4:
            st.session_state.radiator_discount = st.number_input(
                "–°–∫–∏–¥–∫–∞ –Ω–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä—ã, %",
                min_value=0.0,
                max_value=100.0,
                value=0.0,
                step=0.5
            )
        
        with col5:
            st.session_state.bracket_discount = st.number_input(
                "–°–∫–∏–¥–∫–∞ –Ω–∞ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã, %",
                min_value=0.0,
                max_value=100.0,
                value=0.0,
                step=0.5
            )
        
        # –ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤
        self.display_radiator_matrix()
    
    def display_radiator_matrix(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤"""
        sheet_name = f"{st.session_state.connection_var} {st.session_state.radiator_type_var}"
        
        if sheet_name not in self.sheets:
            st.error(f"–õ–∏—Å—Ç '{sheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        data = self.sheets[sheet_name]
        lengths = list(range(400, 2100, 100))
        heights = [300, 400, 500, 600, 900]
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã
        st.subheader("–ú–∞—Ç—Ä–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤")
        st.markdown("**–í—ã—Å–æ—Ç–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤, –º–º ‚Üí**")
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ (–≤—ã—Å–æ—Ç—ã)
        cols = st.columns(len(heights) + 1)
        with cols[0]:
            st.markdown("**–î–ª–∏–Ω–∞ ‚Üì**")
        for j, h in enumerate(heights):
            with cols[j + 1]:
                st.markdown(f"**{h}**")
        
        # –°—Ç—Ä–æ–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã
        for i, length in enumerate(lengths):
            cols = st.columns(len(heights) + 1)
            
            with cols[0]:
                st.markdown(f"**{length}**")
            
            for j, height in enumerate(heights):
                with cols[j + 1]:
                    self.create_matrix_cell(sheet_name, data, length, height)
    
    def create_matrix_cell(self, sheet_name, data, length, height):
        """–°–æ–∑–¥–∞–Ω–∏–µ —è—á–µ–π–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã"""
        pattern = f"/{height}/{length}"
        match = data[data['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].str.contains(pattern, na=False)]
        
        if not match.empty:
            product = match.iloc[0]
            art = str(product['–ê—Ä—Ç–∏–∫—É–ª']).strip()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            current_value = self.entry_values.get((sheet_name, art), "")
            
            # –ü–æ–ª–µ –≤–≤–æ–¥–∞
            new_value = st.text_input(
                "",
                value=current_value,
                key=f"{sheet_name}_{art}",
                label_visibility="collapsed",
                placeholder="0"
            )
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if new_value != current_value:
                if new_value.strip():
                    self.entry_values[(sheet_name, art)] = new_value
                else:
                    self.entry_values.pop((sheet_name, art), None)
            
            # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
            if st.session_state.show_tooltips and st.session_state.get(f"hover_{sheet_name}_{art}"):
                power = product.get('–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç', '')
                weight = product.get('–í–µ—Å, –∫–≥', '')
                volume = product.get('–û–±—ä–µ–º, –º3', '')
                
                st.caption(f"–ê—Ä—Ç: {art}")
                st.caption(f"–ú–æ—â–Ω–æ—Å—Ç—å: {power} –í—Ç")
                st.caption(f"–í–µ—Å: {weight} –∫–≥")
    
    def create_spec_preview(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        st.header("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é"):
            spec_data = self.prepare_spec_data()
            if spec_data is not None:
                st.session_state.spec_data = spec_data
        
        if st.session_state.spec_data is not None:
            self.display_spec_table(st.session_state.spec_data)
            
            # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üíæ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"):
                    self.download_excel(st.session_state.spec_data)
            with col2:
                if st.button("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"):
                    self.download_csv(st.session_state.spec_data)
    
    def display_spec_table(self, spec_data):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_data = spec_data.copy()
        display_data['–¶–µ–Ω–∞, —Ä—É–± (—Å –ù–î–°)'] = display_data['–¶–µ–Ω–∞, —Ä—É–± (—Å –ù–î–°)'].round(2)
        display_data['–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π, —Ä—É–± (—Å –ù–î–°)'] = display_data['–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π, —Ä—É–± (—Å –ù–î–°)'].round(2)
        display_data['–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)'] = display_data['–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)'].round(2)
        
        st.dataframe(
            display_data,
            use_container_width=True,
            hide_index=True
        )
        
        # –ò—Ç–æ–≥–∏
        total_sum = spec_data["–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)"].sum()
        total_qty_radiators = sum(spec_data.query("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ.str.contains('–†–∞–¥–∏–∞—Ç–æ—Ä')")["–ö–æ–ª-–≤–æ"])
        total_qty_brackets = sum(spec_data.query("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ.str.contains('–ö—Ä–æ–Ω—à—Ç–µ–π–Ω')")["–ö–æ–ª-–≤–æ"])
        
        st.markdown(f"**–ò—Ç–æ–≥–æ:** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_qty_radiators} / {total_qty_brackets} | –°—É–º–º–∞: {total_sum:.2f} —Ä—É–±")
    
    def prepare_spec_data(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–π –≤–µ—Ä—Å–∏–∏)"""
        try:
            spec_data = []
            radiator_data = []
            bracket_data = []
            brackets_temp = {}

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤
            for (sheet_name, art), value in self.entry_values.items():
                if value and sheet_name in self.sheets:
                    qty_radiator = self.parse_quantity(value)
                    mask = self.sheets[sheet_name]['–ê—Ä—Ç–∏–∫—É–ª'] == art
                    product = self.sheets[sheet_name].loc[mask]
                    
                    if product.empty:
                        continue
                    
                    product = product.iloc[0]
                    price = float(product['–¶–µ–Ω–∞, —Ä—É–±'])
                    discount = st.session_state.radiator_discount
                    discounted_price = round(price * (1 - discount / 100), 2)
                    total = round(discounted_price * qty_radiator, 2)
                    
                    radiator_data.append({
                        "‚Ññ": len(radiator_data) + 1,
                        "–ê—Ä—Ç–∏–∫—É–ª": str(product['–ê—Ä—Ç–∏–∫—É–ª']).strip(),
                        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": str(product['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']),
                        "–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç": float(product.get('–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç', 0)),
                        "–¶–µ–Ω–∞, —Ä—É–± (—Å –ù–î–°)": float(price),
                        "–°–∫–∏–¥–∫–∞, %": float(discount),
                        "–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π, —Ä—É–± (—Å –ù–î–°)": float(discounted_price),
                        "–ö–æ–ª-–≤–æ": int(qty_radiator),
                        "–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)": float(total)
                    })

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤
                    if st.session_state.bracket_var != "–ë–µ–∑ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤":
                        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤
                        brackets = self.calculate_brackets_simple(
                            str(product['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']),
                            qty_radiator
                        )
                        
                        for art_bracket, qty_bracket in brackets:
                            mask_bracket = self.brackets_df['–ê—Ä—Ç–∏–∫—É–ª'] == art_bracket
                            bracket_info = self.brackets_df.loc[mask_bracket]
                            
                            if bracket_info.empty:
                                continue
                                
                            key = art_bracket.strip()
                            if key not in brackets_temp:
                                price_bracket = float(bracket_info.iloc[0]['–¶–µ–Ω–∞, —Ä—É–±'])
                                discount_bracket = st.session_state.bracket_discount
                                discounted_price_bracket = round(price_bracket * (1 - discount_bracket / 100), 2)
                                
                                brackets_temp[key] = {
                                    "–ê—Ä—Ç–∏–∫—É–ª": art_bracket,
                                    "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": str(bracket_info.iloc[0]['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']),
                                    "–¶–µ–Ω–∞, —Ä—É–± (—Å –ù–î–°)": float(price_bracket),
                                    "–°–∫–∏–¥–∫–∞, %": float(discount_bracket),
                                    "–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π, —Ä—É–± (—Å –ù–î–°)": float(discounted_price_bracket),
                                    "–ö–æ–ª-–≤–æ": 0,
                                    "–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)": 0.0
                                }
                            
                            brackets_temp[key]["–ö–æ–ª-–≤–æ"] += int(qty_bracket)
                            brackets_temp[key]["–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)"] += round(
                                brackets_temp[key]["–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π, —Ä—É–± (—Å –ù–î–°)"] * qty_bracket, 2
                            )

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤
            for b in brackets_temp.values():
                bracket_data.append({
                    "‚Ññ": len(radiator_data) + len(bracket_data) + 1,
                    "–ê—Ä—Ç–∏–∫—É–ª": str(b["–ê—Ä—Ç–∏–∫—É–ª"]),
                    "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": str(b["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"]),
                    "–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç": 0.0,
                    "–¶–µ–Ω–∞, —Ä—É–± (—Å –ù–î–°)": float(b["–¶–µ–Ω–∞, —Ä—É–± (—Å –ù–î–°)"]),
                    "–°–∫–∏–¥–∫–∞, %": float(b["–°–∫–∏–¥–∫–∞, %"]),
                    "–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π, —Ä—É–± (—Å –ù–î–°)": float(b["–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π, —Ä—É–± (—Å –ù–î–°)"]),
                    "–ö–æ–ª-–≤–æ": int(b["–ö–æ–ª-–≤–æ"]),
                    "–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)": float(b["–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)"])
                })

            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            combined_data = radiator_data + bracket_data
            
            if not combined_data:
                st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                return None

            # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
            df = pd.DataFrame(
                combined_data,
                columns=[
                    "‚Ññ", "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç",
                    "–¶–µ–Ω–∞, —Ä—É–± (—Å –ù–î–°)", "–°–∫–∏–¥–∫–∞, %",
                    "–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π, —Ä—É–± (—Å –ù–î–°)", "–ö–æ–ª-–≤–æ",
                    "–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)"
                ]
            )
            
            return df
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
            return None
    
    def calculate_brackets_simple(self, radiator_name, qty_radiator):
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤"""
        brackets = []
        
        if "—Ç–∏–ø 10" in radiator_name or "—Ç–∏–ø 11" in radiator_name:
            brackets.append(("–ö9.2L", 2 * qty_radiator))
            brackets.append(("–ö9.2R", 2 * qty_radiator))
        elif "—Ç–∏–ø 20" in radiator_name or "—Ç–∏–ø 21" in radiator_name or "—Ç–∏–ø 22" in radiator_name:
            brackets.append(("–ö15.4500", 2 * qty_radiator))
        elif "—Ç–∏–ø 30" in radiator_name or "—Ç–∏–ø 33" in radiator_name:
            brackets.append(("–ö15.4500", 3 * qty_radiator))
        
        return brackets
    
    def parse_quantity(self, value):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–π –≤–µ—Ä—Å–∏–∏)"""
        try:
            if not value:
                return 0
            
            if isinstance(value, (int, float)):
                return int(round(float(value)))
            
            value = str(value).strip()
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö '+'
            while value.startswith('+'):
                value = value[1:]
            while value.endswith('+'):
                value = value[:-1]
            
            if not value:
                return 0
            
            # –°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–µ–π
            parts = value.split('+')
            total = 0
            for part in parts:
                part = part.strip()
                if part:
                    total += int(round(float(part)))
                    
            return total
        except:
            return 0
    
    def download_excel(self, spec_data):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞"""
        try:
            output = io.BytesIO()
            
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                spec_data.to_excel(writer, sheet_name='–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è', index=False)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                workbook = writer.book
                worksheet = writer.sheets['–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è']
                
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                for cell in worksheet[1]:
                    cell.font = Font(bold=True)
                    cell.alignment = Alignment(horizontal='center')
            
            output.seek(0)
            
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª",
                data=output,
                file_name="–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è_—Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel: {str(e)}")
    
    def download_csv(self, spec_data):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞"""
        try:
            csv_data = spec_data[['–ê—Ä—Ç–∏–∫—É–ª', '–ö–æ–ª-–≤–æ']].to_csv(index=False, sep=';')
            
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å CSV —Ñ–∞–π–ª",
                data=csv_data,
                file_name="—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è.csv",
                mime="text/csv"
            )
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CSV: {str(e)}")
    
    def handle_file_upload(self, uploaded_file):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            if uploaded_file.name.endswith(('.xlsx', '.xls')):
                df = pd.read_excel(uploaded_file, engine='openpyxl')
            elif uploaded_file.name.endswith('.csv'):
                df = pd.read_csv(uploaded_file, sep=';')
            else:
                st.error("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
                return
            
            # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
            art_col = None
            qty_col = None
            
            for col in df.columns:
                col_lower = str(col).lower()
                if '–∞—Ä—Ç–∏–∫—É–ª' in col_lower or 'art' in col_lower:
                    art_col = col
                elif '–∫–æ–ª-–≤–æ' in col_lower or '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' in col_lower:
                    qty_col = col
            
            if art_col is None:
                art_col = df.columns[0]
            if qty_col is None and len(df.columns) > 1:
                qty_col = df.columns[1]
            
            if qty_col is None:
                st.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º")
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            loaded_count = 0
            for _, row in df.iterrows():
                art = str(row[art_col]).strip()
                qty = self.parse_quantity(row[qty_col])
                
                if qty > 0 and art:
                    # –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–∞ –≤ –¥–∞–Ω–Ω—ã—Ö
                    for sheet_name, sheet_data in self.sheets.items():
                        if art in sheet_data['–ê—Ä—Ç–∏–∫—É–ª'].astype(str).str.strip().values:
                            self.entry_values[(sheet_name, art)] = str(qty)
                            loaded_count += 1
                            break
            
            st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count} –ø–æ–∑–∏—Ü–∏–π")
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
    
    def generate_spec(self, file_type):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        spec_data = self.prepare_spec_data()
        if spec_data is not None:
            st.session_state.spec_data = spec_data
            st.success("–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!")
    
    def show_instruction(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é"""
        st.info("""
        **–ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ**
        
        1. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
        2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –º–∞—Ç—Ä–∏—Ü—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
        3. –ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é"
        4. –°–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        """)
    
    def show_license(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ"""
        st.info("""
        **–õ–ò–¶–ï–ù–ó–ò–û–ù–ù–û–ï –°–û–ì–õ–ê–®–ï–ù–ò–ï**
        
        –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π 
        –Ω–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä—ã METEOR. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.
        """)

def main():
    app = RadiatorWebApp()
    app.create_interface()

if __name__ == "__main__":
    main()