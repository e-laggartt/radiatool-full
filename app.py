import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
import tempfile
import io
import base64

st.set_page_config(
    page_title="RadiaTool Web v2.0",
    page_icon="üîß",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'selected_items' not in st.session_state:
    st.session_state.selected_items = {}
if 'spec_data' not in st.session_state:
    st.session_state.spec_data = []
if 'matrix_data' not in st.session_state:
    st.session_state.matrix_data = []
if 'sheets' not in st.session_state:
    st.session_state.sheets = {}
if 'brackets_df' not in st.session_state:
    st.session_state.brackets_df = None

@st.cache_data
def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
        matrix_path = "data/–ú–∞—Ç—Ä–∏—Ü–∞.xlsx"
        sheets = pd.read_excel(matrix_path, sheet_name=None, engine='openpyxl')
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤
        brackets_path = "data/–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã.xlsx"
        brackets_df = pd.read_excel(brackets_path, engine='openpyxl')
        brackets_df['–ê—Ä—Ç–∏–∫—É–ª'] = brackets_df['–ê—Ä—Ç–∏–∫—É–ª'].astype(str).str.strip()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—Ä–∏—Ü—ã
        for sheet_name, data in sheets.items():
            data['–ê—Ä—Ç–∏–∫—É–ª'] = data['–ê—Ä—Ç–∏–∫—É–ª'].astype(str).str.strip()
            data['–í–µ—Å, –∫–≥'] = pd.to_numeric(data['–í–µ—Å, –∫–≥'], errors='coerce').fillna(0)
            data['–û–±—ä–µ–º, –º3'] = pd.to_numeric(data['–û–±—ä–µ–º, –º3'], errors='coerce').fillna(0)
            data['–¶–µ–Ω–∞, —Ä—É–±'] = pd.to_numeric(data['–¶–µ–Ω–∞, —Ä—É–±'], errors='coerce').fillna(0)
            if '–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç' not in data.columns:
                data['–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç'] = ''
        
        return sheets, brackets_df
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}, None

def main():
    st.title("üîß RadiaTool Web v2.0")
    st.markdown("---")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if not st.session_state.sheets:
        st.session_state.sheets, st.session_state.brackets_df = load_data()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("‚öôÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        
        # –í—ã–±–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connection = st.selectbox(
            "–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
            ["VK-–ø—Ä–∞–≤–æ–µ", "VK-–ª–µ–≤–æ–µ", "K-–±–æ–∫–æ–≤–æ–µ"],
            key="connection"
        )
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞
        if connection == "VK-–ª–µ–≤–æ–µ":
            rad_types = ["10", "11", "30", "33"]
        else:
            rad_types = ["10", "11", "20", "21", "22", "30", "33"]
            
        rad_type = st.selectbox("–¢–∏–ø —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞", rad_types, key="rad_type")
        
        # –¢–∏–ø –∫—Ä–µ–ø–ª–µ–Ω–∏—è
        bracket_type = st.selectbox(
            "–¢–∏–ø –∫—Ä–µ–ø–ª–µ–Ω–∏—è",
            ["–ù–∞—Å—Ç–µ–Ω–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã", "–ù–∞–ø–æ–ª—å–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã", "–ë–µ–∑ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤"],
            key="bracket_type"
        )
        
        st.header("üí∞ –°–∫–∏–¥–∫–∏")
        col1, col2 = st.columns(2)
        with col1:
            radiator_discount = st.number_input(
                "–†–∞–¥–∏–∞—Ç–æ—Ä—ã, %", 
                min_value=0.0, max_value=100.0, value=0.0, step=0.1,
                key="radiator_discount"
            )
        with col2:
            bracket_discount = st.number_input(
                "–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã, %", 
                min_value=0.0, max_value=100.0, value=0.0, step=0.1,
                key="bracket_discount"
            )
        
        st.header("üîß –î–µ–π—Å—Ç–≤–∏—è")
        if st.button("üîÑ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å", use_container_width=True):
            reset_all()
        
        if st.button("üìä –û–±–Ω–æ–≤–∏—Ç—å –º–∞—Ç—Ä–∏—Ü—É", use_container_width=True):
            update_matrix_data(connection, rad_type)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    tab1, tab2, tab3 = st.tabs(["üìä –ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤", "üìã –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è", "‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ"])
    
    with tab1:
        display_matrix_interface(connection, rad_type)
    
    with tab2:
        display_specification_interface(radiator_discount, bracket_discount, bracket_type)
    
    with tab3:
        display_additional_tools()

def update_matrix_data(connection, rad_type):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—Ä–∏—Ü—ã"""
    sheet_name = f"{connection} {rad_type}"
    if sheet_name in st.session_state.sheets:
        data = st.session_state.sheets[sheet_name]
        matrix_data = []
        
        for _, row in data.iterrows():
            try:
                name = str(row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'])
                name_parts = name.split('/')
                
                if len(name_parts) >= 3:
                    height_str = name_parts[-2].replace('–º–º', '').strip()
                    length_str = name_parts[-1].replace('–º–º', '').strip().split()[0]
                    
                    height = int(height_str) if height_str.isdigit() else 0
                    length = int(length_str) if length_str.isdigit() else 0
                    
                    matrix_data.append({
                        'articul': str(row['–ê—Ä—Ç–∏–∫—É–ª']).strip(),
                        'name': name,
                        'height': height,
                        'length': length,
                        'power': str(row.get('–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç', '')),
                        'weight': float(row['–í–µ—Å, –∫–≥']),
                        'volume': float(row['–û–±—ä–µ–º, –º3']),
                        'price': float(row.get('–¶–µ–Ω–∞, —Ä—É–±', 0))
                    })
            except Exception as e:
                continue
        
        st.session_state.matrix_data = matrix_data
        st.success("–ú–∞—Ç—Ä–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    else:
        st.error(f"–õ–∏—Å—Ç '{sheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")

def display_matrix_interface(connection, rad_type):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –º–∞—Ç—Ä–∏—Ü—ã"""
    
    if not st.session_state.matrix_data:
        update_matrix_data(connection, rad_type)
    
    st.header("–ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤")
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2 = st.columns(2)
    with col1:
        min_height = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞", value=300, step=100)
    with col2:
        max_height = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞", value=900, step=100)
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    filtered_data = [item for item in st.session_state.matrix_data 
                    if min_height <= item['height'] <= max_height]
    
    if not filtered_data:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã
    heights = sorted(list(set(item['height'] for item in filtered_data)))
    lengths = sorted(list(set(item['length'] for item in filtered_data)))
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –¥–ª—è –≤–≤–æ–¥–∞
    st.subheader("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤:")
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–∞—Ç—Ä–∏—Ü—ã
    cols = st.columns(len(heights) + 1)
    with cols[0]:
        st.markdown("**–î–ª–∏–Ω–∞/–í—ã—Å–æ—Ç–∞**")
    for i, height in enumerate(heights):
        with cols[i + 1]:
            st.markdown(f"**{height} –º–º**")
    
    # –°—Ç—Ä–æ–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã
    for length in lengths:
        cols = st.columns(len(heights) + 1)
        
        with cols[0]:
            st.markdown(f"**{length} –º–º**")
        
        for i, height in enumerate(heights):
            with cols[i + 1]:
                item = next((x for x in filtered_data if x['length'] == length and x['height'] == height), None)
                if item:
                    current_qty = st.session_state.selected_items.get(item['articul'], 0)
                    new_qty = st.number_input(
                        "",
                        min_value=0,
                        value=current_qty,
                        key=f"matrix_{item['articul']}",
                        label_visibility="collapsed"
                    )
                    
                    if new_qty != current_qty:
                        st.session_state.selected_items[item['articul']] = new_qty
                        
                    # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
                    with st.expander("", expanded=False):
                        st.caption(f"–ê—Ä—Ç: {item['articul']}")
                        st.caption(f"–ú–æ—â–Ω–æ—Å—Ç—å: {item['power']} –í—Ç")
                        st.caption(f"–í–µ—Å: {item['weight']} –∫–≥")
                        st.caption(f"–û–±—ä–µ–º: {item['volume']} –º¬≥")
                        st.caption(f"–¶–µ–Ω–∞: {item['price']} —Ä—É–±")
                else:
                    st.markdown("‚Äî")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_selected = sum(st.session_state.selected_items.values())
    st.info(f"üéØ –í—ã–±—Ä–∞–Ω–æ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤: {total_selected} —à—Ç")

def display_specification_interface(radiator_discount, bracket_discount, bracket_type):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    st.header("–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        if st.button("üîÑ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é", use_container_width=True):
            calculate_specification(radiator_discount, bracket_discount, bracket_type)
    with col2:
        if st.button("üíæ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", use_container_width=True):
            export_to_excel(radiator_discount, bracket_discount, bracket_type)
    with col3:
        if st.button("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ç–∏–∫—É–ª—ã", use_container_width=True):
            copy_articuls()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if st.session_state.spec_data:
        display_specification_table()
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        display_totals()
    else:
        st.info("–†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")

def calculate_specification(radiator_discount, bracket_discount, bracket_type):
    """–†–∞—Å—á–µ—Ç –ø–æ–ª–Ω–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    try:
        spec_data = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–¥–∏–∞—Ç–æ—Ä—ã
        for articul, qty in st.session_state.selected_items.items():
            if qty <= 0:
                continue
                
            # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ –¥–∞–Ω–Ω—ã—Ö
            for sheet_name, data in st.session_state.sheets.items():
                product = data[data['–ê—Ä—Ç–∏–∫—É–ª'].str.strip() == articul]
                if not product.empty:
                    product = product.iloc[0]
                    price = float(product.get('–¶–µ–Ω–∞, —Ä—É–±', 0))
                    discounted_price = round(price * (1 - radiator_discount / 100), 2)
                    total = round(discounted_price * qty, 2)
                    
                    spec_data.append({
                        "‚Ññ": len(spec_data) + 1,
                        "–ê—Ä—Ç–∏–∫—É–ª": articul,
                        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": product['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'],
                        "–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç": product.get('–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç', ''),
                        "–¶–µ–Ω–∞, —Ä—É–± (—Å –ù–î–°)": price,
                        "–°–∫–∏–¥–∫–∞, %": radiator_discount,
                        "–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π, —Ä—É–± (—Å –ù–î–°)": discounted_price,
                        "–ö–æ–ª-–≤–æ": qty,
                        "–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)": total,
                        "–¢–∏–ø": "–†–∞–¥–∏–∞—Ç–æ—Ä"
                    })
                    break
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã
        if bracket_type != "–ë–µ–∑ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤" and st.session_state.brackets_df is not None:
            brackets = calculate_brackets(bracket_type, bracket_discount)
            spec_data.extend(brackets)
        
        st.session_state.spec_data = spec_data
        st.success(f"–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞: {len(spec_data)} –ø–æ–∑–∏—Ü–∏–π")
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")

def calculate_brackets(bracket_type, bracket_discount):
    """–†–∞—Å—á–µ—Ç –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤"""
    brackets = []
    
    if not st.session_state.selected_items:
        return brackets
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤
    bracket_counts = {}
    
    for articul, qty in st.session_state.selected_items.items():
        if qty <= 0:
            continue
            
        # –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞
        for sheet_name, data in st.session_state.sheets.items():
            product = data[data['–ê—Ä—Ç–∏–∫—É–ª'].str.strip() == articul]
            if not product.empty:
                product = product.iloc[0]
                name = product['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']
                
                try:
                    name_parts = name.split('/')
                    if len(name_parts) >= 3:
                        height = int(name_parts[-2].replace('–º–º', '').strip())
                        length = int(name_parts[-1].replace('–º–º', '').strip().split()[0])
                        rad_type = sheet_name.split()[-1]
                        
                        # –†–∞—Å—á–µ—Ç –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤ –ø–æ —Ç–∏–ø—É
                        if bracket_type == "–ù–∞—Å—Ç–µ–Ω–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã":
                            if rad_type in ["10", "11"]:
                                bracket_counts["–ö9.2L"] = bracket_counts.get("–ö9.2L", 0) + 2 * qty
                                bracket_counts["–ö9.2R"] = bracket_counts.get("–ö9.2R", 0) + 2 * qty
                                if 1700 <= length <= 2000:
                                    bracket_counts["–ö9.3-40"] = bracket_counts.get("–ö9.3-40", 0) + 1 * qty
                            elif rad_type in ["20", "21", "22", "30", "33"]:
                                art_map = {300: "–ö15.4300", 400: "–ö15.4400", 500: "–ö15.4500", 
                                          600: "–ö15.4600", 900: "–ö15.4900"}
                                if height in art_map:
                                    art = art_map[height]
                                    if 400 <= length <= 1600:
                                        bracket_counts[art] = bracket_counts.get(art, 0) + 2 * qty
                                    elif 1700 <= length <= 2000:
                                        bracket_counts[art] = bracket_counts.get(art, 0) + 3 * qty
                        
                        elif bracket_type == "–ù–∞–ø–æ–ª—å–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã":
                            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –Ω–∞–ø–æ–ª—å–Ω—ã—Ö –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤
                            if rad_type in ["10", "11"]:
                                if 300 <= height <= 400:
                                    main_art = "–ö–ù–°450"
                                elif 500 <= height <= 600:
                                    main_art = "–ö–ù–°470"
                                elif height == 900:
                                    main_art = "–ö–ù–°4100"
                                else:
                                    main_art = None
                                
                                if main_art:
                                    bracket_counts[main_art] = bracket_counts.get(main_art, 0) + 2 * qty
                                    if 1700 <= length <= 2000:
                                        bracket_counts["–ö–ù–°430"] = bracket_counts.get("–ö–ù–°430", 0) + 1 * qty
                            
                            # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤
                                
                except Exception as e:
                    continue
                break
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤
    for bracket_art, total_qty in bracket_counts.items():
        if total_qty > 0:
            bracket_info = st.session_state.brackets_df[
                st.session_state.brackets_df['–ê—Ä—Ç–∏–∫—É–ª'] == bracket_art
            ]
            if not bracket_info.empty:
                bracket_info = bracket_info.iloc[0]
                price = float(bracket_info.get('–¶–µ–Ω–∞, —Ä—É–±', 0))
                discounted_price = round(price * (1 - bracket_discount / 100), 2)
                total = round(discounted_price * total_qty, 2)
                
                brackets.append({
                    "‚Ññ": len(brackets) + 1,
                    "–ê—Ä—Ç–∏–∫—É–ª": bracket_art,
                    "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": bracket_info['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'],
                    "–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç": '',
                    "–¶–µ–Ω–∞, —Ä—É–± (—Å –ù–î–°)": price,
                    "–°–∫–∏–¥–∫–∞, %": bracket_discount,
                    "–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π, —Ä—É–± (—Å –ù–î–°)": discounted_price,
                    "–ö–æ–ª-–≤–æ": total_qty,
                    "–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)": total,
                    "–¢–∏–ø": "–ö—Ä–æ–Ω—à—Ç–µ–π–Ω"
                })
    
    return brackets

def display_specification_table():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    df = pd.DataFrame(st.session_state.spec_data)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    display_df = df.copy()
    numeric_cols = ['–¶–µ–Ω–∞, —Ä—É–± (—Å –ù–î–°)', '–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π, —Ä—É–± (—Å –ù–î–°)', '–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)']
    for col in numeric_cols:
        if col in display_df.columns:
            display_df[col] = display_df[col].map(lambda x: f"{x:,.2f}" if pd.notna(x) else "")
    
    st.dataframe(
        display_df,
        use_container_width=True,
        hide_index=True,
        column_config={
            "‚Ññ": st.column_config.NumberColumn(width="small"),
            "–ê—Ä—Ç–∏–∫—É–ª": st.column_config.TextColumn(width="medium"),
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": st.column_config.TextColumn(width="large"),
            "–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç": st.column_config.TextColumn(width="small"),
            "–¶–µ–Ω–∞, —Ä—É–± (—Å –ù–î–°)": st.column_config.TextColumn(width="medium"),
            "–°–∫–∏–¥–∫–∞, %": st.column_config.NumberColumn(width="small"),
            "–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π, —Ä—É–± (—Å –ù–î–°)": st.column_config.TextColumn(width="medium"),
            "–ö–æ–ª-–≤–æ": st.column_config.NumberColumn(width="small"),
            "–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)": st.column_config.TextColumn(width="medium"),
        }
    )

def display_totals():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    
    if not st.session_state.spec_data:
        return
    
    spec_df = pd.DataFrame(st.session_state.spec_data)
    
    # –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤
    total_sum = spec_df['–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)'].sum()
    total_qty_radiators = spec_df[spec_df['–¢–∏–ø'] == '–†–∞–¥–∏–∞—Ç–æ—Ä']['–ö–æ–ª-–≤–æ'].sum()
    total_qty_brackets = spec_df[spec_df['–¢–∏–ø'] == '–ö—Ä–æ–Ω—à—Ç–µ–π–Ω']['–ö–æ–ª-–≤–æ'].sum()
    
    # –†–∞—Å—á–µ—Ç –≤–µ—Å–∞ –∏ –æ–±—ä–µ–º–∞
    total_weight = 0
    total_volume = 0
    for item in st.session_state.spec_data:
        if item['–¢–∏–ø'] == '–†–∞–¥–∏–∞—Ç–æ—Ä':
            articul = item['–ê—Ä—Ç–∏–∫—É–ª']
            qty = item['–ö–æ–ª-–≤–æ']
            
            for sheet_name, data in st.session_state.sheets.items():
                product = data[data['–ê—Ä—Ç–∏–∫—É–ª'].str.strip() == articul]
                if not product.empty:
                    total_weight += float(product.iloc[0]['–í–µ—Å, –∫–≥']) * qty
                    total_volume += float(product.iloc[0]['–û–±—ä–µ–º, –º3']) * qty
                    break
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–û–±—â–∞—è —Å—É–º–º–∞", f"{total_sum:,.2f} —Ä—É–±")
    
    with col2:
        st.metric("–†–∞–¥–∏–∞—Ç–æ—Ä—ã / –ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã", f"{total_qty_radiators} / {total_qty_brackets}")
    
    with col3:
        st.metric("–û–±—â–∏–π –≤–µ—Å", f"{total_weight:.1f} –∫–≥")
    
    with col4:
        st.metric("–û–±—â–∏–π –æ–±—ä–µ–º", f"{total_volume:.3f} –º¬≥")

def export_to_excel(radiator_discount, bracket_discount, bracket_type):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"""
    
    if not st.session_state.spec_data:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        output = io.BytesIO()
        
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è
            spec_df = pd.DataFrame(st.session_state.spec_data)
            spec_df.to_excel(writer, sheet_name='–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è', index=False)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
            worksheet = writer.sheets['–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è']
            column_widths = {'A': 8, 'B': 15, 'C': 60, 'D': 12, 'E': 15, 
                           'F': 10, 'G': 20, 'H': 10, 'I': 15}
            for col, width in column_widths.items():
                worksheet.column_dimensions[col].width = width
        
        excel_data = output.getvalue()
        
        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª",
            data=excel_data,
            file_name=f"–†–∞—Å—á–µ—Ç_—Å—Ç–æ–∏–º–æ—Å—Ç–∏_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            use_container_width=True
        )
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")

def copy_articuls():
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –≤ –±—É—Ñ–µ—Ä"""
    
    if not st.session_state.spec_data:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    articuls = [item['–ê—Ä—Ç–∏–∫—É–ª'] for item in st.session_state.spec_data if item['–¢–∏–ø'] == '–†–∞–¥–∏–∞—Ç–æ—Ä']
    articuls_text = '\n'.join(articuls)
    
    # –í Streamlit –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±—É—Ñ–µ—Ä—É, –ø–æ—ç—Ç–æ–º—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫–∞—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    st.download_button(
        label="üìã –°–∫–∞—á–∞—Ç—å –∞—Ä—Ç–∏–∫—É–ª—ã (TXT)",
        data=articuls_text,
        file_name="–∞—Ä—Ç–∏–∫—É–ª—ã.txt",
        mime="text/plain",
        use_container_width=True
    )

def display_additional_tools():
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
    
    st.header("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    
    tab1, tab2, tab3 = st.tabs(["–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"])
    
    with tab1:
        st.subheader("–ò–º–ø–æ—Ä—Ç –∏–∑ Excel/CSV")
        
        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏", 
                                       type=['xlsx', 'xls', 'csv'])
        
        if uploaded_file is not None:
            try:
                if uploaded_file.name.endswith('.csv'):
                    df = pd.read_csv(uploaded_file, sep=';')
                else:
                    df = pd.read_excel(uploaded_file, engine='openpyxl')
                
                st.success(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {len(df)} —Å—Ç—Ä–æ–∫")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
                st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
                st.dataframe(df.head(10), use_container_width=True)
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
                art_col = None
                qty_col = None
                
                for col in df.columns:
                    col_lower = str(col).lower()
                    if any(x in col_lower for x in ['–∞—Ä—Ç–∏–∫—É–ª', 'art', '–∫–æ–¥']):
                        art_col = col
                    elif any(x in col_lower for x in ['–∫–æ–ª-–≤–æ', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'qty']):
                        qty_col = col
                
                if art_col and qty_col:
                    st.info(f"–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: –ê—Ä—Ç–∏–∫—É–ª - {art_col}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ - {qty_col}")
                    
                    if st.button("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"):
                        import_data(df, art_col, qty_col)
                else:
                    st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–æ–ª–±—Ü—ã")
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
    
    with tab2:
        st.subheader("–°–ø—Ä–∞–≤–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        
        st.markdown("""
        ### üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        
        1. **–í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤** - –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞ –∏ –∫—Ä–µ–ø–ª–µ–Ω–∏—è
        2. **–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã** - –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —è—á–µ–π–∫–∞—Ö
        3. **–†–∞—Å—á–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏** - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–ª–Ω–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
        4. **–≠–∫—Å–ø–æ—Ä—Ç** - —Å–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel
        
        ### üîß –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        
        - –ü–æ–¥–±–æ—Ä —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤ –ø–æ —Ç–∏–ø–æ—Ä–∞–∑–º–µ—Ä–∞–º
        - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤
        - –£—á–µ—Ç —Å–∫–∏–¥–æ–∫ –Ω–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä—ã –∏ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã
        - –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤
        - –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π
        """)
    
    with tab3:
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        st.number_input("–†–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã (—Å—Ç—Ä–æ–∫)", value=20, key="matrix_size")
        st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏", value=True, key="show_tooltips")
        st.checkbox("–ê–≤—Ç–æ—Ä–∞—Å—á–µ—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏", value=True, key="auto_calculate")

def import_data(df, art_col, qty_col):
    """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
    
    try:
        imported_count = 0
        
        for _, row in df.iterrows():
            art = str(row[art_col]).strip()
            qty = int(float(row[qty_col])) if pd.notna(row[qty_col]) else 0
            
            if qty > 0 and art:
                # –ò—â–µ–º –∞—Ä—Ç–∏–∫—É–ª –≤ –¥–∞–Ω–Ω—ã—Ö
                for sheet_name, data in st.session_state.sheets.items():
                    if art in data['–ê—Ä—Ç–∏–∫—É–ª'].astype(str).str.strip().values:
                        st.session_state.selected_items[art] = (
                            st.session_state.selected_items.get(art, 0) + qty
                        )
                        imported_count += 1
                        break
        
        st.success(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} –ø–æ–∑–∏—Ü–∏–π")
        st.rerun()
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")

def reset_all():
    """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    st.session_state.selected_items = {}
    st.session_state.spec_data = []
    st.success("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã!")
    st.rerun()

if __name__ == "__main__":
    main()